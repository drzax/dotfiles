#!/usr/bin/env bash

set -e

# Logging stuff.
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;34m➜\033[0m  $@"; }

package="github-create"

hash jq 2>/dev/null || { echo >&2 "Some functionality in this program requires 'jq'. Get it here: https://stedolan.github.io/jq/"; }

# Gather vars
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "$package - create a new repo on github.com"
      echo " "
      echo "$package [options] [name]"
      echo " "
      echo "options:"
      echo "-h, --help                show brief help"
      echo "--auth                    interactively authenticate with GitHub"
      echo "--org <organisation>      the organisation this repository should belong to"
      echo "--token <token>           GitHub API token"
      echo "--desc <description>      description for repo"
      echo "-P, --private             make the repository private"
      echo "-p, --push                add remote and push automatically"
      echo "--remote <name>           add remote (default: 'origin')"
      exit 0
      ;;
    --auth)
      # Log the user into gist.
      # This method asks the user for a username and password, and tries to obtain
      # and OAuth2 access token, which is then stored in ~/.gist
      # see http://developer.github.com/v3/oauth/

      TIME=`date "+%Y-%m-%d %H:%M:%S"`

      e_header "Obtaining OAuth2 access_token from github."
      echo -n "GitHub username: "
      read AUTH_USERNAME

      echo -n "GitHub password: "
      read -s AUTH_PASSWORD
      echo ""

      declare -n section=HEADERS
      while IFS= read -r line; do
          if [[ $line = $'\r' ]]; then
              declare -n section=BODY
          fi
          section+=("`echo $line | tr -d '\r'`")
      done < <(curl -sD - -u $AUTH_USERNAME:$AUTH_PASSWORD https://api.github.com/authorizations -d "{\"scopes\": [\"repo\"], \"note\": \"The github-create utility ($TIME)\", \"note_url\": \"https://github.com/drzax/dotfiles/blob/master/bin/github-create\"}" | sed 's/\r$//')

      HEADERS=${HEADERS[@]}
      BODY=${BODY[@]}

      if [[ $HEADERS =~ ^HTTP\/1\.1[[:space:]]401[[:space:]]Unauthorized ]]; then
        if [[ $HEADERS =~ ^HTTP\/1\.1[[:space:]]401[[:space:]]Unauthorized.*X-GitHub-OTP:[[:space:]]required.*$ ]]; then
          echo -n "GitHub One Time Password: "
          read AUTH_OTP

          unset HEADERS
          unset BODY

          declare -n section=HEADERS
          while IFS= read -r line; do
              if [[ $line = $'\r' ]]; then
                  declare -n section=BODY
              fi
              section+=("`echo $line | tr -d '\r'`")
          done < <(curl -sD - -u $AUTH_USERNAME:$AUTH_PASSWORD -H "X-GitHub-OTP: $AUTH_OTP" https://api.github.com/authorizations -d "{\"scopes\": [\"repo\"], \"note\": \"The github-create utility ($TIME)\", \"note_url\": \"https://github.com/drzax/dotfiles/blob/master/bin/github-create\"}")

          HEADERS=${HEADERS[@]}
          BODY=${BODY[@]}

        else
          e_error "Authorisation failed."
          exit 1
        fi
      fi

      if [[ $HEADERS =~ ^HTTP\/1\.1[[:space:]]201[[:space:]]Created.*$ ]]; then
        echo $BODY | jq -r '.token' > ~/.github-create
        e_success "Success! https://github.com/settings/tokens"
        exit 0
      else
        e_error "Authorisation failed."
        exit 1
      fi
      ;;
    --org*)
      if [[ $1 =~ [.+=.+] ]]; then
        ORG=`echo $1 | sed -e 's/^[^=]*=//g'`
      else
        shift
        ORG=$1
      fi
      shift
      ;;
    --token*)
      if [[ $1 =~ [.+=.+] ]]; then
        TOKEN=`echo $1 | sed -e 's/^[^=]*=//g'`
      else
        shift
        TOKEN=$1
      fi
      shift
      ;;
    --desc*)
      if [[ $1 =~ [.+=.+] ]]; then
        DESC=`echo $1 | sed -e 's/^[^=]*=//g'`
      else
        shift
        DESC=$1
      fi
      shift
      ;;
    --remote*)
      if [[ $1 =~ [.+=.+] ]]; then
        REMOTE=`echo $1 | sed -e 's/^[^=]*=//g'`
      else
        shift
        REMOTE=$1
      fi
      ADD_REMOTE=true
      shift
      ;;
    -P|--private)
      PRIVATE=true
      shift
      ;;
    -p|--push)
      PUSH=true
      shift
      ;;
    *)
      break
      ;;
  esac
done

REPO_NAME=${1:-`basename $(pwd)`}
TOKEN=`cat ~/.github-create`

if [[ "$DESC" = "" ]]; then
  echo -n "Enter description for your new repository: "
  read DESC
fi

if [[ "$TOKEN" = "" ]]; then
  echo -n "Enter API token: "
  read TOKEN
fi

if [[ $ORG ]]; then
  ENDPOINT="orgs/$ORG/repos"
else
  ENDPOINT="user/repos"
fi

# Defaults
PRIVATE=${PRIVATE:-false}
PUSH=${PUSH:-false}
REMOTE=${REMOTE:-origin}
ADD_REMOTE=${ADD_REMOTE:-$PUSH}

echo -n "Creating GitHub repository '$REPO_NAME' "
if [[ $ORG ]]; then
  echo -n "under the '$ORG' organisation "
fi
echo -n "... "

# Curl some json to the github API oh damn we so fancy
# TODO: add flags for issues, downloads, wiki, etc
RESPONSE=`curl -H "Authorization: token $TOKEN" https://api.github.com/$ENDPOINT -d "{\"name\": \"$REPO_NAME\", \"description\": \"${DESCRIPTION}\", \"private\": $PRIVATE, \"has_issues\": true, \"has_downloads\": true, \"has_wiki\": false}" 2>/dev/null`

if [[ "`echo $RESPONSE | jq '.errors'`" != "null"  ]]; then
  echo "error."
  echo $RESPONSE | jq '.'
  exit 1
fi

echo "done."
echo $RESPONSE | jq -r '.html_url'

#USERNAME= "`echo $RESPONSE | jq -r '.owner.login'`"
USERNAME=`echo $RESPONSE | sed -n "s/^.*\"login\"\: \"\([^\"]*\).*$/\1/p"`

if [[ $ADD_REMOTE = true ]]; then
  echo ""
  echo -n "Adding remote '$REMOTE' ..."
  git remote add $REMOTE git@github.com:$USERNAME/$REPO_NAME.git
  echo " done."
fi

if [[ $PUSH = true ]]; then
  echo ""
  e_header "Pushing code to '$REMOTE'"
  git push -u $REMOTE master
fi
